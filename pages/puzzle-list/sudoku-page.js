import styles from '../../styles/sudoku.module.css'
import Link from 'next/link';
import Image from 'next/image';
import Head from 'next/head'
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Dropdown from 'react-bootstrap/Dropdown';
import { setItem, getItem } from '../localStorage';
import Sudoku from '../../sudoku/sudoku'
import { get_puzzle } from '../../database';
import Wordoku from '../../sudoku/wordoku';
import CommentSection from '../comments';

export async function getServerSideProps(context) {
  // const [puzzles, setPuzzles] = useState([]);
  // const router = useRouter()
  // const {id} = router.query

  // await fetch("/api/puzzles/")
  //       .then((response) => response.json())
  //       .then(data => data);
  const id = context.query.id
  const data = await get_puzzle(id)

  return {
    props: {data},
  }
}


export default function sudokuPage(props) {

  // const [puzzles, setPuzzles] = useState({});
  
  const [user, setUser] = useState({username: ""});

  useEffect(() => {
    if (typeof window !== 'undefined') {
      const user = getItem('user');
      if (user) {
           setUser(JSON.parse(user));
      }
  }
  }, [])

  const router = useRouter()
  const {id} = router.query

  const [vote, setVote] = useState(0);
  const [allVotes, setAllVotes] = useState(0);

  let changed = false;

  function changeVote(value) {
    if (vote == value) {
      setVote(0);
      setAllVotes(allVotes - value);
    }
    else {
      setAllVotes((allVotes - vote) + value);
      setVote(value);
    }
  }

  useEffect(() => {
    fetch(`/api/puzzles/votes?pid=${encodeURIComponent(props.data._id)}`).then(res => res.json())
      .then(res => {
        setAllVotes(res.value);
      })
    fetch(`/api/puzzles/uservote?pid=${encodeURIComponent(props.data._id)}&uid=${encodeURIComponent(user.user_id)}`).then(res => res.json())
      .then(res => setVote(res.value));
  }, [])

  useEffect(() => {
    if (vote > -2 && vote < 2 && !changed) fetch(`/api/puzzles/vote?pid=${encodeURIComponent(props.data._id)}&uid=${encodeURIComponent(user.user_id)}&value=${vote}`);
    changed = true;
  }, [vote])

  // useEffect(() => {

  //   fetch("/api/puzzles/")
  //       .then((response) => response.json())
  //       .then(data => setPuzzles(data));

  // })

  // const testArray = puzzles.data
  
  return (
    <div className={styles.container}>

      <Head>
        <title>{props.data.variant == "sudoku" ? "Sudoku" : "Wordoku"}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.png" />
      </Head>

      <nav class="navbar sticky-top" style={{backgroundImage: "linear-gradient(160deg, #ea730f 0%, #fcc300 100%)", boxShadow: "0px 0px 5px #9e8a67"}}>
        <div class="container-fluid">
          <span className={styles.logo}>
            <Link className={styles.icon} href="../">
              <Image  src="/favicon.png" alt="Logo" width={50} height={50} class="d-inline-block align-text-top"/>
            </Link>

            <Link href="../home">
              <div className={styles.brand}>
              Solvesudo
              </div>
            </Link>
          </span>

          <Dropdown className={styles.menuDropdown}>
            <Dropdown.Toggle className={styles.dropHead}>
              Menu
            </Dropdown.Toggle>

            <Dropdown.Menu className={styles.dropItem}>
              <Dropdown.Item className={styles.dropItems} href="../puzzle-list/sudoku">Play Sudoku</Dropdown.Item>
              <Dropdown.Item className={styles.dropItems} href="../puzzle-list/wordoku">Play Wordoku</Dropdown.Item>
              <Dropdown.Item className={styles.dropItems} href="../create-sudoku?variant=sudoku">Create Sudoku</Dropdown.Item>
              <Dropdown.Item className={styles.dropItems} href="../create-sudoku?variant=wordoku">Create Wordoku</Dropdown.Item>
              <Dropdown.Item className={styles.dropItems} href="../leaderboard">View Leaderboard</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>


        </div>
      </nav>

      <main className={styles.main}>


        <div className={styles.card}>
          {
            props.data.variant == "sudoku"
            ?
            <Sudoku puzzle={props.data} user_id={user.user_id} puzzle_id={props.data._id} votes={allVotes}/>
            :
            <Wordoku puzzle={props.data} user_id={user.user_id} puzzle_id={props.data._id} votes={allVotes}/>
          }

        </div>
      
      <div>
        <button className={vote === 1 ? styles.button_selected : styles.button} onClick={() => changeVote(1)}>Upvote Puzzle ↑ </button>
        <button className={vote === -1 ? styles.button_selected : styles.button} onClick={() => changeVote(-1)}>Downvote Puzzle ↓ </button>
      </div>
      
      <div className={styles.comment}>
      <CommentSection user_id = {user.user_id} puzzle_id = {props.data._id} />
      </div>

      </main>
    </div>
  )
}

