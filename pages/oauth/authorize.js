import { useRouter } from 'next/router';
import { get_oauth_client } from '/database';
import React, { useRef } from 'react';
import styles from '../../styles/admin.module.css';
import Image from 'next/image';
import Head from 'next/head';
import Link from 'next/link';


export default function Authorize(props) {
  if (!props.fields_present) return (
    <div>
      <p>Required header fields not present.</p>
    </div>
  );

  if (!props.valid_client) return (
    <div>
      <p>Client information not registered or malformed.</p>
    </div>
  );

  const usernameRef = useRef();
  const passwordRef = useRef();
  const router = useRouter();

  function handleSubmit(event) {
    event.preventDefault();
    const [username, password] = [usernameRef.current.value, passwordRef.current.value];
    fetch('/api/login?nocookie', { method: 'POST', mode: 'same-origin', headers: { 'Content-Type': 'application/json' }, redirect: 'follow', body: JSON.stringify({ username: username, password: password }) }).then(res => {
      if (res.ok) return res.json();
      else throw 'Invalid Login';
    }).then(res => {
      fetch('/api/oauth/dispensecode', { method: 'POST', mode: 'same-origin', headers: { 'Content-Type': 'application/json' }, redirect: 'follow', body: JSON.stringify({ client_id: props.client_id, uuid: res.uuid }) }).then(res => {
        if (res.ok) return res.json();
        else throw 'Cannot create oauth code';
      }).then(res => {
        const code = res.code;
        router.replace({ pathname: props.redirect_url, query: { code: code } });
        //fetch('/api/oauth/sendcode', {method: 'GET', headers: {'Content-Type': 'application/json', 'code': code}, body: JSON.stringify({redirect_url: redirect_url}), redirect: 'follow'});
      })
    }).catch(err => {
      alert(err);
    });
  }

  return (
    <div className={styles.container}>
      <nav class="navbar sticky-top" style={{ backgroundImage: "linear-gradient(160deg, #ea730f 0%, #fcc300 100%)", boxShadow: "0px 0px 5px #9e8a67" }}>
        <div class="container-fluid">
          <span className={styles.logo}>
            <Link className={styles.icon} href="./">
              <Image src="/favicon.png" alt="Logo" width={50} height={50} class="d-inline-block align-text-top" />
            </Link>

            <Link href="./">
              <div className={styles.brand}>
                SiteName
              </div>
            </Link>
          </span>
        </div>
      </nav>

      <Head>
        <title>Login Page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.png" />
      </Head>
    <div>
        <title>Login</title>
          <div className={styles.content_container}>
            <div className={styles.form_box}>
              <form className={styles.transparent_box} onSubmit={handleSubmit}>
                <h2 className={styles.heading}>Login</h2>
                <label>Username</label>
                <br />
                <input className={styles.form_inputs} type="text" id="username" placeholder="Username" ref={usernameRef} required />
                <br /><br />
                <label>Password</label>
                <br />
                <input className={styles.form_inputs} type="Password" id="pass" placeholder="Password (8 characters minimum)" ref={passwordRef} minLength="8" required />
                <br /><br />
                <input className={styles.sbutton} type="submit" name="log" id="submit-login" defaultValue="Log In" />
              </form>
            </div>
          </div>
        </div>
    </div>
  );
}

export async function getServerSideProps(context) {
  const body = context.query;
  const [client_id, redirect_url] = [body.client_id, body.redirect_url];
  console.log(`${client_id}\n${redirect_url}`);

  if (!client_id || !redirect_url) return { props: { fields_present: false } };

  //const { get_oauth_client } = await import('/database.js');
  const client = await get_oauth_client(client_id);

  if (!client) return { props: { fields_present: true, valid_client: false } };
  if (client.redirect_url !== redirect_url) return { props: { fields_present: true, valid_client: false } };
  return {
    props: { fields_present: true, valid_client: true, client_id: client_id, redirect_url: redirect_url }
  };
}